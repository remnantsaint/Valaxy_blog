{"_attachments":{},"_id":"encodeurl","_rev":"849-61f1455cb677e08f5113bef5","description":"Encode a URL to a percent-encoded form, excluding already-encoded sequences","dist-tags":{"latest":"2.0.0"},"license":"MIT","maintainers":[{"name":"dougwilson","email":"doug@somethingdoug.com"},{"name":"blakeembrey","email":"hello@blakeembrey.com"},{"name":"ulisesgascon","email":"ulisesgascondev@gmail.com"}],"name":"encodeurl","readme":"# Encode URL\n\nEncode a URL to a percent-encoded form, excluding already-encoded sequences.\n\n## Installation\n\n```sh\nnpm install encodeurl\n```\n\n## API\n\n```js\nvar encodeUrl = require('encodeurl')\n```\n\n### encodeUrl(url)\n\nEncode a URL to a percent-encoded form, excluding already-encoded sequences.\n\nThis function accepts a URL and encodes all the non-URL code points (as UTF-8 byte sequences). It will not encode the \"%\" character unless it is not part of a valid sequence (`%20` will be left as-is, but `%foo` will be encoded as `%25foo`).\n\nThis encode is meant to be \"safe\" and does not throw errors. It will try as hard as it can to properly encode the given URL, including replacing any raw, unpaired surrogate pairs with the Unicode replacement character prior to encoding.\n\n## Examples\n\n### Encode a URL containing user-controlled data\n\n```js\nvar encodeUrl = require('encodeurl')\nvar escapeHtml = require('escape-html')\n\nhttp.createServer(function onRequest (req, res) {\n  // get encoded form of inbound url\n  var url = encodeUrl(req.url)\n\n  // create html message\n  var body = '<p>Location ' + escapeHtml(url) + ' not found</p>'\n\n  // send a 404\n  res.statusCode = 404\n  res.setHeader('Content-Type', 'text/html; charset=UTF-8')\n  res.setHeader('Content-Length', String(Buffer.byteLength(body, 'utf-8')))\n  res.end(body, 'utf-8')\n})\n```\n\n### Encode a URL for use in a header field\n\n```js\nvar encodeUrl = require('encodeurl')\nvar escapeHtml = require('escape-html')\nvar url = require('url')\n\nhttp.createServer(function onRequest (req, res) {\n  // parse inbound url\n  var href = url.parse(req)\n\n  // set new host for redirect\n  href.host = 'localhost'\n  href.protocol = 'https:'\n  href.slashes = true\n\n  // create location header\n  var location = encodeUrl(url.format(href))\n\n  // create html message\n  var body = '<p>Redirecting to new site: ' + escapeHtml(location) + '</p>'\n\n  // send a 301\n  res.statusCode = 301\n  res.setHeader('Content-Type', 'text/html; charset=UTF-8')\n  res.setHeader('Content-Length', String(Buffer.byteLength(body, 'utf-8')))\n  res.setHeader('Location', location)\n  res.end(body, 'utf-8')\n})\n```\n\n## Similarities\n\nThis function is _similar_ to the intrinsic function `encodeURI`. However, it will not encode:\n\n* The `\\`, `^`, or `|` characters\n* The `%` character when it's part of a valid sequence\n* `[` and `]` (for IPv6 hostnames)\n* Replaces raw, unpaired surrogate pairs with the Unicode replacement character\n\nAs a result, the encoding aligns closely with the behavior in the [WHATWG URL specification][whatwg-url]. However, this package only encodes strings and does not do any URL parsing or formatting.\n\nIt is expected that any output from `new URL(url)` will not change when used with this package, as the output has already been encoded. Additionally, if we were to encode before `new URL(url)`, we do not expect the before and after encoded formats to be parsed any differently.\n\n## Testing\n\n```sh\n$ npm test\n$ npm run lint\n```\n\n## References\n\n- [RFC 3986: Uniform Resource Identifier (URI): Generic Syntax][rfc-3986]\n- [WHATWG URL Living Standard][whatwg-url]\n\n[rfc-3986]: https://tools.ietf.org/html/rfc3986\n[whatwg-url]: https://url.spec.whatwg.org/\n\n## License\n\n[MIT](LICENSE)\n","time":{"created":"2022-01-26T12:58:04.310Z","modified":"2024-05-30T18:16:24.664Z","1.0.2":"2018-01-22T03:19:29.733Z","1.0.1":"2016-06-10T00:48:58.829Z","1.0.0":"2016-06-08T18:58:44.662Z","2.0.0":"2024-03-29T00:03:42.135Z"},"versions":{"1.0.2":{"name":"encodeurl","description":"Encode a URL to a percent-encoded form, excluding already-encoded sequences","version":"1.0.2","contributors":[{"name":"Douglas Christopher Wilson","email":"doug@somethingdoug.com"}],"license":"MIT","keywords":["encode","encodeurl","url"],"repository":{"type":"git","url":"git+https://github.com/pillarjs/encodeurl.git"},"devDependencies":{"eslint":"3.19.0","eslint-config-standard":"10.2.1","eslint-plugin-import":"2.8.0","eslint-plugin-node":"5.2.1","eslint-plugin-promise":"3.6.0","eslint-plugin-standard":"3.0.1","istanbul":"0.4.5","mocha":"2.5.3"},"files":["LICENSE","HISTORY.md","README.md","index.js"],"engines":{"node":">= 0.8"},"scripts":{"lint":"eslint .","test":"mocha --reporter spec --bail --check-leaks test/","test-cov":"istanbul cover node_modules/mocha/bin/_mocha -- --reporter dot --check-leaks test/","test-travis":"istanbul cover node_modules/mocha/bin/_mocha --report lcovonly -- --reporter spec --check-leaks test/"},"gitHead":"1a7301e330bf20fd7c8c173102315e45cd1f5d1e","bugs":{"url":"https://github.com/pillarjs/encodeurl/issues"},"homepage":"https://github.com/pillarjs/encodeurl#readme","_id":"encodeurl@1.0.2","_shasum":"ad3ff4c86ec2d029322f5a02c3a9a606c95b3f59","_from":".","_npmVersion":"3.10.10","_nodeVersion":"6.11.1","_npmUser":{"name":"dougwilson","email":"doug@somethingdoug.com"},"dist":{"shasum":"ad3ff4c86ec2d029322f5a02c3a9a606c95b3f59","size":3260,"noattachment":false,"tarball":"https://registry.npmmirror.com/encodeurl/-/encodeurl-1.0.2.tgz","integrity":"sha512-TPJXq8JqFaVYm2CWmPvnP2Iyo4ZSM7/QKcSmuMLDObfpH5fi7RUGmd/rTDf+rut/saiDiQEeVTNgAmJEdAOx0w=="},"maintainers":[{"name":"dougwilson","email":"doug@somethingdoug.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/encodeurl-1.0.2.tgz_1516591169672_0.5424360500182956"},"directories":{},"publish_time":1516591169733,"_hasShrinkwrap":false,"_cnpm_publish_time":1516591169733,"_cnpmcore_publish_time":"2021-12-13T10:17:54.900Z"},"1.0.1":{"name":"encodeurl","description":"Encode a URL to a percent-encoded form, excluding already-encoded sequences","version":"1.0.1","contributors":[{"name":"Douglas Christopher Wilson","email":"doug@somethingdoug.com"}],"license":"MIT","keywords":["encode","encodeurl","url"],"repository":{"type":"git","url":"git+https://github.com/pillarjs/encodeurl.git"},"devDependencies":{"eslint":"2.11.1","eslint-config-standard":"5.3.1","eslint-plugin-promise":"1.3.2","eslint-plugin-standard":"1.3.2","istanbul":"0.4.3","mocha":"2.5.3"},"files":["LICENSE","HISTORY.md","README.md","index.js"],"engines":{"node":">= 0.8"},"scripts":{"lint":"eslint **/*.js","test":"mocha --reporter spec --bail --check-leaks test/","test-cov":"istanbul cover node_modules/mocha/bin/_mocha -- --reporter dot --check-leaks test/","test-travis":"istanbul cover node_modules/mocha/bin/_mocha --report lcovonly -- --reporter spec --check-leaks test/"},"gitHead":"39ed0c235fed4cea7d012038fd6bb0480561d226","bugs":{"url":"https://github.com/pillarjs/encodeurl/issues"},"homepage":"https://github.com/pillarjs/encodeurl#readme","_id":"encodeurl@1.0.1","_shasum":"79e3d58655346909fe6f0f45a5de68103b294d20","_from":".","_npmVersion":"2.15.1","_nodeVersion":"4.4.3","_npmUser":{"name":"dougwilson","email":"doug@somethingdoug.com"},"dist":{"shasum":"79e3d58655346909fe6f0f45a5de68103b294d20","size":3099,"noattachment":false,"tarball":"https://registry.npmmirror.com/encodeurl/-/encodeurl-1.0.1.tgz","integrity":"sha512-Emsft8lNRSZ7+fFm2KgTM8OZPcfHip/hNMSkje83n+LqPx5tI4xkCxyunJIG3EZsWHz9sqzohiPR6monRXWD8g=="},"maintainers":[{"name":"dougwilson","email":"doug@somethingdoug.com"}],"_npmOperationalInternal":{"host":"packages-12-west.internal.npmjs.com","tmp":"tmp/encodeurl-1.0.1.tgz_1465519736251_0.09314409433864057"},"directories":{},"publish_time":1465519738829,"_hasShrinkwrap":false,"_cnpm_publish_time":1465519738829,"_cnpmcore_publish_time":"2021-12-13T10:17:55.219Z"},"1.0.0":{"name":"encodeurl","description":"Encode a URL to a percent-encoded form, excluding already-encoded sequences","version":"1.0.0","contributors":[{"name":"Douglas Christopher Wilson","email":"doug@somethingdoug.com"}],"license":"MIT","keywords":["encode","encodeurl","url"],"repository":{"type":"git","url":"https://github.com/pillarjs/encodeurl"},"devDependencies":{"eslint":"2.11.1","eslint-config-standard":"5.3.1","eslint-plugin-promise":"1.3.2","eslint-plugin-standard":"1.3.2","istanbul":"0.4.3","mocha":"2.5.3"},"files":["LICENSE","HISTORY.md","README.md","index.js"],"engines":{"node":">= 0.8"},"scripts":{"lint":"eslint **/*.js","test":"mocha --reporter spec --bail --check-leaks test/","test-cov":"istanbul cover node_modules/mocha/bin/_mocha -- --reporter dot --check-leaks test/","test-travis":"istanbul cover node_modules/mocha/bin/_mocha --report lcovonly -- --reporter spec --check-leaks test/"},"gitHead":"b3f2a3a74af20c4b27f0466782d80fb0685feb47","bugs":{"url":"https://github.com/pillarjs/encodeurl/issues"},"homepage":"https://github.com/pillarjs/encodeurl","_id":"encodeurl@1.0.0","_shasum":"7cfb78e36a241593379e2ebad3926783dc18e058","_from":".","_npmVersion":"1.4.28","_npmUser":{"name":"dougwilson","email":"doug@somethingdoug.com"},"maintainers":[{"name":"dougwilson","email":"doug@somethingdoug.com"}],"dist":{"shasum":"7cfb78e36a241593379e2ebad3926783dc18e058","size":3072,"noattachment":false,"tarball":"https://registry.npmmirror.com/encodeurl/-/encodeurl-1.0.0.tgz","integrity":"sha512-t7dshuwL0l+kfCkwsQufpTKS2QpamJxUAxvdo+icEyV76RY/BhaD57Cla6WJC1Mz9IYOH3mhen6fkKLsKR3i8g=="},"_npmOperationalInternal":{"host":"packages-12-west.internal.npmjs.com","tmp":"tmp/encodeurl-1.0.0.tgz_1465412322161_0.9512871925253421"},"directories":{},"publish_time":1465412324662,"_hasShrinkwrap":false,"_cnpm_publish_time":1465412324662,"_cnpmcore_publish_time":"2021-12-13T10:17:55.500Z"},"2.0.0":{"name":"encodeurl","description":"Encode a URL to a percent-encoded form, excluding already-encoded sequences","version":"2.0.0","contributors":[{"name":"Douglas Christopher Wilson","email":"doug@somethingdoug.com"}],"license":"MIT","keywords":["encode","encodeurl","url"],"repository":{"type":"git","url":"git+https://github.com/pillarjs/encodeurl.git"},"devDependencies":{"eslint":"5.11.1","eslint-config-standard":"12.0.0","eslint-plugin-import":"2.14.0","eslint-plugin-node":"7.0.1","eslint-plugin-promise":"4.0.1","eslint-plugin-standard":"4.0.0","istanbul":"0.4.5","mocha":"2.5.3"},"engines":{"node":">= 0.8"},"scripts":{"lint":"eslint .","test":"mocha --reporter spec --bail --check-leaks test/","test-cov":"istanbul cover node_modules/mocha/bin/_mocha -- --reporter dot --check-leaks test/","test-travis":"istanbul cover node_modules/mocha/bin/_mocha --report lcovonly -- --reporter spec --check-leaks test/"},"_id":"encodeurl@2.0.0","gitHead":"5f2205efe622fc7972c4e45ed7cbe7f8d652c299","bugs":{"url":"https://github.com/pillarjs/encodeurl/issues"},"homepage":"https://github.com/pillarjs/encodeurl#readme","_nodeVersion":"21.0.0","_npmVersion":"10.2.0","dist":{"integrity":"sha512-Q0n9HRi4m6JuGIV1eFlmvJB7ZEVxu93IrMyiMsGC0lrMJMWzRgx6WGquyfQgZVb31vhGgXnfmPNNXmxnOkRBrg==","shasum":"7b8ea898077d7e409d3ac45474ea38eaf0857a58","tarball":"https://registry.npmmirror.com/encodeurl/-/encodeurl-2.0.0.tgz","fileCount":4,"unpackedSize":6980,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIBOFos/fjObZakhslwkYNCRgy3lxta+k4AJdNDf+lDfaAiEArFwkiXZR7H08jnrMnVmch2fkcCs8hSToYkixEEgpsVA="}],"size":3020},"_npmUser":{"name":"blakeembrey","email":"hello@blakeembrey.com"},"directories":{},"maintainers":[{"name":"blakeembrey","email":"hello@blakeembrey.com"},{"name":"dougwilson","email":"doug@somethingdoug.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/encodeurl_2.0.0_1711670621995_0.1569270866269692"},"_hasShrinkwrap":false,"_cnpmcore_publish_time":"2024-03-29T00:03:42.135Z","publish_time":1711670622135,"_source_registry_name":"default"}},"bugs":{"url":"https://github.com/pillarjs/encodeurl/issues"},"contributors":[{"name":"Douglas Christopher Wilson","email":"doug@somethingdoug.com"}],"homepage":"https://github.com/pillarjs/encodeurl#readme","keywords":["encode","encodeurl","url"],"repository":{"type":"git","url":"git+https://github.com/pillarjs/encodeurl.git"},"_source_registry_name":"default"}