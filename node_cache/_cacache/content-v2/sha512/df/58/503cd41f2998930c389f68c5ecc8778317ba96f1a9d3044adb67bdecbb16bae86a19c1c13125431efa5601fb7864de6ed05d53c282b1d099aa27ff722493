{"_attachments":{},"_id":"double-bits","_rev":"308463-61f1d924ffbd598ed28e6b6a","author":{"name":"Mikola Lysenko"},"description":"Inspect binary representation of IEEE754 doubles","dist-tags":{"latest":"1.1.1"},"license":"MIT","maintainers":[{"name":"mikolalysenko","email":"mikolalysenko@gmail.com"}],"name":"double-bits","readme":"double-bits\n===========\nRoutines for manipulating binary representations of a IEEE 754 double precision numbers.\n\n[![testling badge](https://ci.testling.com/mikolalysenko/double-bits.png)](https://ci.testling.com/mikolalysenko/double-bits)\n\n[![build status](https://secure.travis-ci.org/mikolalysenko/double-bits.png)](http://travis-ci.org/mikolalysenko/double-bits)\n\n## Example\n\n```javascript\nvar db = require(\"double-bits\")\n\n//Get higher order word\nconsole.log(db.hi(1.0).toString(16))    //Prints out: 3ff00000\n\n//Get lower order word\nconsole.log(db.lo(1.0).toString(16))    //Prints out: 0\n\n//Combine two words into a double\nconsole.log(db.pack(0, 0x3ff00000))     //Prints out: 1.0\n\n//More sophisticated example:  Print out base 2 representation\nvar pad = require(\"pad\")\nfunction base2Str(n) {\n  var f = db.fraction(n)\n  return (db.sign(n) ? \"-\" : \"\") +\n    \"2^\" + (db.exponent(n)+1) +\n    \" * 0.\" + pad(f[1].toString(2), 20, \"0\") + \n              pad(f[0].toString(2), 32, \"0\")\n}\nconsole.log(base2Str(1.0))\n//Prints out:\n//\n//   2^1 * 0.10000000000000000000000000000000000000000000000000000\n//\n```\n\n## Install\n\n```\nnpm install double-bits\n```\n\n## API\n\n```javascript\nvar db = require(\"double-bits\")\n```\n\n### `db(n)`\nReturns a pair of 32-bit unsigned ints encoding the lower/higher order words respectively representing `n`\n\n* `n` is an IEEE754 double number\n\n**Returns** An array, `[lo,hi]` encoding `n`\n\n### `db.lo(n)`\nReturns the lower order word of `n`\n\n* `n` is an IEEE754 number\n\n**Returns** The lower order word of `n`\n\n### `db.hi(n)`\nReturns the higher order word of `n`\n\n* `n` is an IEEE754 number\n\n**Returns** The higher order word of `n`\n\n### `db.pack(lo, hi)`\nGiven a pair of lower/higher order words, concatenate them into a 64 bit double precision number\n\n* `lo` is the lower order word\n* `hi` is the higher order word\n\n**Returns** An IEEE754 double precision number formed by concatenating the bits of `lo` and `hi`\n\n### `db.sign(n)`\nReturns the state of the sign bit of `n`\n\n* `n` is an IEEE754 double precision number\n\n**Returns** The sign bit of `n`\n\n### `db.exponent(n)`\nReturns the exponent of `n`\n\n* `n` is an IEEE754 double precision number\n\n**Returns** The exponent of `n`\n\n### `db.fraction(n)`\nReturns the fractional part of `n`\n\n* `n` is an IEEE754 double precision number\n\n**Returns** The fractional part of `n` encoded as a pair of numbers, `[lo,hi]` where `lo` is a 32 bit integer and `hi` is a 21 bit integer.\n\n### `db.denormalized(n)`\nTest if a double is [denormalized](http://en.wikipedia.org/wiki/Denormal_number).\n\n* `n` is a number\n\n**Returns** `true` if `n` is denormal, `false` otherwise\n\n## Credits\n(c) 2014 Mikola Lysenko. BSD License","time":{"created":"2022-01-26T23:28:36.510Z","modified":"2022-01-26T23:28:36.510Z","1.1.1":"2014-06-12T23:06:54.785Z","1.1.0":"2014-05-01T13:13:27.642Z","1.0.0":"2014-04-28T17:11:14.503Z"},"versions":{"1.1.1":{"name":"double-bits","version":"1.1.1","description":"Inspect binary representation of IEEE754 doubles","main":"double.js","directories":{"example":"example","test":"test"},"dependencies":{},"devDependencies":{"pad":"0.0.4","tape":"^2.12.3"},"scripts":{"test":"tape test/*.js"},"repository":{"type":"git","url":"git://github.com/mikolalysenko/double-bits.git"},"keywords":["double","bits","exponent","fraction","sign","binary","word"],"author":{"name":"Mikola Lysenko"},"license":"MIT","bugs":{"url":"https://github.com/mikolalysenko/double-bits/issues"},"homepage":"https://github.com/mikolalysenko/double-bits","testling":{"files":"test/*.js","browsers":["ie/8..latest","firefox/17..latest","firefox/nightly","chrome/22..latest","chrome/canary","opera/12..latest","opera/next","safari/5.1..latest","ipad/6.0..latest","iphone/6.0..latest","android-browser/4.2..latest"]},"_id":"double-bits@1.1.1","dist":{"shasum":"58abba45494da4d0fa36b73ad11a286c9184b1c6","size":3242,"noattachment":false,"tarball":"https://registry.npmmirror.com/double-bits/-/double-bits-1.1.1.tgz","integrity":"sha512-BCLEIBq0O/DWoA7BsCu/R+RP0ZXiowP8BhtJT3qeuuQEBpnS8LK/Wo6UTJQv6v8mK1fj8n90YziHLwGdM5whSg=="},"_from":".","_npmVersion":"1.4.3","_npmUser":{"name":"mikolalysenko","email":"mikolalysenko@gmail.com"},"maintainers":[{"name":"mikolalysenko","email":"mikolalysenko@gmail.com"}],"publish_time":1402614414785,"_hasShrinkwrap":false,"_cnpm_publish_time":1402614414785,"_cnpmcore_publish_time":"2021-12-17T00:04:22.171Z"},"1.1.0":{"name":"double-bits","version":"1.1.0","description":"Inspect binary representation of IEEE754 doubles","main":"double.js","directories":{"example":"example","test":"test"},"dependencies":{},"devDependencies":{"pad":"0.0.4","tape":"^2.12.3"},"scripts":{"test":"tape test/*.js"},"repository":{"type":"git","url":"git://github.com/mikolalysenko/double-bits.git"},"keywords":["double","bits","exponent","fraction","sign","binary","word"],"author":{"name":"Mikola Lysenko"},"license":"MIT","bugs":{"url":"https://github.com/mikolalysenko/double-bits/issues"},"homepage":"https://github.com/mikolalysenko/double-bits","_id":"double-bits@1.1.0","dist":{"shasum":"87ea00aa6cbabbe40472a972f8e2becfd3ed4df7","size":2778,"noattachment":false,"tarball":"https://registry.npmmirror.com/double-bits/-/double-bits-1.1.0.tgz","integrity":"sha512-8mu7EWUYk4IcgNd4afX05EMlpumMQudNMN/e/RK90q+j4R51HNx4GE5b4L4Pu/dd/hDERhNtKqdkA2BG69IWWg=="},"_from":".","_npmVersion":"1.4.3","_npmUser":{"name":"mikolalysenko","email":"mikolalysenko@gmail.com"},"maintainers":[{"name":"mikolalysenko","email":"mikolalysenko@gmail.com"}],"publish_time":1398950007642,"_hasShrinkwrap":false,"_cnpm_publish_time":1398950007642,"_cnpmcore_publish_time":"2021-12-17T00:04:22.410Z"},"1.0.0":{"name":"double-bits","version":"1.0.0","description":"Inspect binary representation of IEEE754 doubles","main":"double.js","directories":{"example":"example","test":"test"},"dependencies":{},"devDependencies":{"pad":"0.0.4","tape":"^2.12.3"},"scripts":{"test":"tape test/*.js"},"repository":{"type":"git","url":"git://github.com/mikolalysenko/double-bits.git"},"keywords":["double","bits","exponent","fraction","sign","binary","word"],"author":{"name":"Mikola Lysenko"},"license":"MIT","bugs":{"url":"https://github.com/mikolalysenko/double-bits/issues"},"homepage":"https://github.com/mikolalysenko/double-bits","_id":"double-bits@1.0.0","dist":{"shasum":"82b8cca7689d986088e71713c100851fc313efea","size":2626,"noattachment":false,"tarball":"https://registry.npmmirror.com/double-bits/-/double-bits-1.0.0.tgz","integrity":"sha512-JlJPj69PJvfa7J4gDwloXCvWahP/cbPq5SYr0A/NdZ+JzuwavC96wP6GBRAAiZDzK/y6T2e7B9lhzE6Qu5nCQA=="},"_from":".","_npmVersion":"1.4.3","_npmUser":{"name":"mikolalysenko","email":"mikolalysenko@gmail.com"},"maintainers":[{"name":"mikolalysenko","email":"mikolalysenko@gmail.com"}],"publish_time":1398705074503,"_hasShrinkwrap":false,"_cnpm_publish_time":1398705074503,"_cnpmcore_publish_time":"2021-12-17T00:04:22.653Z"}},"_source_registry_name":"default"}