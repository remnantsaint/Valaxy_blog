{"_attachments":{},"_id":"js-cleanup","_rev":"544112-61f23f3d27d783a18f2015b7","author":{"name":"aMarCruz","email":"amarcruzbox-git@yahoo.com"},"description":"Smart comment and whitespace cleaner for JavaScript-like files.","dist-tags":{"latest":"1.2.0"},"license":"MIT","maintainers":[{"name":"amarcruz","email":"amarcruz@yahoo.com"}],"name":"js-cleanup","readme":"# js-cleanup\n\n[![License][license-badge]][license-url]\n[![npm Version][npm-badge]][npm-url]\n[![Travis][travis-badge]][travis-url]\n[![AppVeyor][appveyor-badge]][appveyor-url]\n[![Coverage][coverage-badge]][coverage-url]\n[![Code Quality][codacy-badge]][codacy-url]\n[![Maintainability][climate-badge]][climate-url]\n\nSmart comment and whitespace cleaner for JavaScript-like files.\n\nWith js-cleanup you have:\n\n- Compaction of empty lines within multiline comments and/or out of them.\n- Normalization of line endings to Unix, Mac, or Windows.\n- Removal of JavaScript comments through powerful, configurable filters.\n- Removal of trailing whitespace of each line.\n- TypeScript definitions.\n- Sourcemap support.\n\nAlthough js-cleanup is not locked to a particular JavaScript dialect and can handle any JS-like file: TypeScript, Flow, React, ES9, etc, it is mainly a _postprocessor_, so it should be runned in a later stage of your toolchain, after any preprocessor or transpiler.\n\njs-cleanup requires node v10.14.2 or above, but **avoid the buggy v11.x**\n\n**Why not Uglify?**\n\nUglify is a excelent _minifier_ but you have little control over the results, while with js-cleanup your coding style remains intact and the removal of comments is strictly under your control.\n\n## Support my Work\n\nI'm a full-stack developer with more than 20 year of experience and I try to share most of my work for free and help others, but this takes a significant amount of time and effort so, if you like my work, please consider...\n\n[<img src=\"https://amarcruz.github.io/images/kofi_blue.png\" height=\"36\" title=\"Support Me on Ko-fi\" />][kofi-url]\n\nOf course, feedback, PRs, and stars are also welcome ????\n\nThanks!\n\n## Install\n\n```bash\n$ npm install js-cleanup -D\n# or\n$ yarn add js-cleanup -D\n```\n\n## Usage\n\n```typescript\njsCleanup(sourceCode: string, fileName?: string | null, options?: Options): Result;\n```\n\n### Result\n\nThe result is a plain JS object of this type:\n\n```typescript\ntype Result = {\n  code: string;\n  map?: object | null;\n};\n```\n\n| Name | Description                                                                                      |\n| ---- | ------------------------------------------------------------------------------------------------ |\n| code | The processed code.                                                                              |\n| map  | A raw sourcemap object, or `null` if the text did not change.<br>Undefined if `sourcemap:false`. |\n\n### Options\n\nType definition:\n\n```typescript\ntype Options = {\n  comments?: string | RegExp;\n  compactComments?: boolean;\n  maxEmptyLines?: number; // use -1 to preserve all the lines\n  lineEndings?: string; // 'mac' | 'unix' | 'win'\n  sourcemap?: boolean;\n  sourcemapOptions: {\n    includeContent?: boolean;\n    inlineMap?: boolean;\n    hires?: boolean;\n  };\n};\n```\n\n| Name               | Default | Description                                                                                                                                      |\n| ------------------ | ------- | ------------------------------------------------------------------------------------------------------------------------------------------------ |\n| comments           | 'some'  | Filter or array of filters that determinates which comments should be preserved.<br>Use \"all\" to keep all, or \"none\" to remove all the comments. |\n| compactComments    | true    | Should js-cleanup also compact whitespace and blank lines in the preserved multiline comments?<br>Line-ending normalization is always done.      |\n| maxEmptyLines      | 0       | Maximum successive empty lines to preserve in the output.<br>Use a positive value, or -1 to preserve all the lines                               |\n| lineEndings        | 'unix'  | Type of Line-ending for normalization: \"unix\", \"mac\", \"win\".                                                                                     |\n| sourcemap          | true    | Should js-cleanup generate a sourcemap?                                                                                                          |\n| _sourcemapOptions_ | -       |\n| includeContent     | false   | Include the original source text in the sourcemap?                                                                                               |\n| inlineMap          | false   | Inline the sourcemap in the processed text?                                                                                                      |\n| hires              | true    | Should a hi-res sourcemap be generated?                                                                                                          |\n\n_**Note:**_\\\n_If you want to keep JSDoc comments, you should also set `compactComments: false`._\\\n_Since the JSDoc presentation depends on empty lines, these should be controlled by you._\n\n## Predefined Comment Filters\n\nInstead the special 'all' or 'none' keywords, you can use any combination of custom filters along with any of these predefined ones:\n\n| Name     | Will preserve...                                                                                                                                                                                                                                        |\n| -------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| some     | Comments containing \"@license\", \"@preserve\", or starting with \"!\".                                                                                                                                                                                      |\n| license  | Comments containing \"@license\".                                                                                                                                                                                                                         |\n| eslint   | [ESLint](http://eslint.org/docs/user-guide/configuring) directives.                                                                                                                                                                                     |\n| flow     | Facebook [Flow](https://flow.org/en/docs) directives, [comment types](https://flow.org/en/docs/types/comments/), and [flowlint](https://flow.org/en/docs/linting/flowlint-comments/) comments.                                                          |\n| istanbul | [istanbul](https://github.com/gotwarlost/istanbul/blob/master/ignoring-code-for-coverage.md) ignore comments.                                                                                                                                           |\n| jsdoc    | [JSDoc](http://usejsdoc.org/) comments.                                                                                                                                                                                                                 |\n| jshint   | [JSHint](http://jshint.com/docs/#inline-configuration) directives.                                                                                                                                                                                      |\n| jslint   | [JSLint](http://www.jslint.com/help.html) directives.                                                                                                                                                                                                   |\n| sources  | Sourcemap directives [sourceURL](https://www.html5rocks.com/en/tutorials/developertools/sourcemaps/#toc-sourceurl) and [sourceMappingURL](https://docs.google.com/document/d/1U1RGAehQwRypUTovF1KRlpiOFze0b-_2gc6fAH0KY0k/edit#heading=h.9ppdoan5f016). |\n| ts       | MS [TypeScript](http://www.typescriptlang.org/) Triple-Slash and @ts-\\* directives, plus the @jsx pragma.                                                                                                                                               |\n| ts3s     | TypeScript [Triple-Slash](http://www.typescriptlang.org/docs/handbook/triple-slash-directives.html) directives.                                                                                                                                         |\n\n_**Note:**_\\\n_Since none of this filters is really accurate (js-cleanup is not a parser), they are suitable for the job without introducing greater complexity._\n\nSee the regexes in [src/predef-filters.ts](https://github.com/aMarCruz/js-cleanup/blob/master/src/predef-filters.ts)\n\n### Custom Filters\n\nA custom filter is a regex that must match the content of the comments that you want to preserve.\n\nThe content of the comments tested by each filter does not includes the first slash, nor the `*/` terminator of the multiline comments, so the multiline comments begins with an asterisk (`*`) and single-line comments begins with a slash (`/`).\n\nFor example, the following filters will preserve ESLint directives and _multiline_ comments starting with a dash:\n\n```js\nconst cleanedCode = jsCleanup(code, null, {\n  comments: [\"eslint\", /^\\*-/],\n});\n```\n\n## License\n\nThe [MIT][license-url] License\n\n&copy; 2018-2020 Alberto Mart√≠nez\n\n[license-badge]: https://img.shields.io/badge/license-MIT-blue.svg?style=flat\n[license-url]: https://github.com/aMarCruz/js-cleanup/blob/master/LICENSE\n[npm-badge]: https://img.shields.io/npm/v/js-cleanup.svg\n[npm-url]: https://www.npmjs.com/package/js-cleanup\n[appveyor-badge]: https://img.shields.io/appveyor/ci/aMarCruz/js-cleanup/master.svg?label=appveyor\n[appveyor-url]: https://ci.appveyor.com/project/aMarCruz/js-cleanup\n[travis-badge]: https://img.shields.io/travis/aMarCruz/js-cleanup/master.svg?label=travis\n[travis-url]: https://travis-ci.org/aMarCruz/js-cleanup\n[coverage-badge]: https://img.shields.io/codecov/c/github/aMarCruz/js-cleanup.svg\n[coverage-url]: https://codecov.io/gh/aMarCruz/js-cleanup\n[codacy-badge]: https://img.shields.io/codacy/grade/1534ad8a654346b78ccb827dabe0bfa8/master.svg\n[codacy-url]: https://www.codacy.com/app/aMarCruz/js-cleanup?utm_source=github.com&utm_medium=referral&utm_content=aMarCruz/js-cleanup&utm_campaign=Badge_Grade\n[climate-badge]: https://img.shields.io/codeclimate/maintainability/aMarCruz/js-cleanup.svg\n[climate-url]: https://codeclimate.com/github/aMarCruz/js-cleanup/maintainability\n[kofi-url]: https://ko-fi.com/C0C7LF7I\n","time":{"created":"2022-01-27T06:44:13.391Z","modified":"2023-07-12T22:23:10.573Z","1.2.0":"2020-09-23T00:31:43.490Z","1.0.1":"2019-01-18T18:31:37.148Z","1.0.0":"2018-12-27T03:25:02.644Z","0.9.0":"2018-12-26T10:25:10.697Z"},"versions":{"1.2.0":{"name":"js-cleanup","version":"1.2.0","description":"Smart comment and whitespace cleaner for JavaScript-like files.","main":"./index.js","module":"./esm/index.mjs","source":"./src/index.ts","engines":{"node":"^10.14.2 || >=12.0.0"},"scripts":{"lint":"eslint -f unix --ext js,ts src test","test":"nyc mocha","pretest":"yarn build","build":"rollup -c && node ./finish","clean":"rimraf ./.nyc_output/** ./coverage/** ./esm/** index.js*","coverage":"nyc report -r=lcov","prepare":"yarn clean && yarn lint && yarn test"},"keywords":["javascript","typescript","es6","clean","cleanup","source","comments","remover","removal"],"author":{"name":"aMarCruz","email":"amarcruzbox-git@yahoo.com"},"license":"MIT","homepage":"https://github.com/aMarCruz/js-cleanup","bugs":{"url":"https://github.com/aMarCruz/js-cleanup/issues"},"repository":{"url":"git+https://github.com/aMarCruz/js-cleanup.git","type":"git"},"dependencies":{"magic-string":"^0.25.7","perf-regexes":"^1.0.1","skip-regex":"^1.0.2"},"devDependencies":{"@rollup/plugin-node-resolve":"~9.0.0","@types/expect":"~1.20.03","@types/mocha":"~8.0.3","@types/node":"~14.11.2","@typescript-eslint/eslint-plugin":"~4.2.0","@typescript-eslint/parser":"~4.2.0","@wessberg/rollup-plugin-ts":"~1.3.4","eslint":"~7.9.0","eslint-config-standardize":"^0.7.1","eslint-plugin-prettierx":"~0.14.0","expect":"~1.20.2","mocha":"~8.1.3","nyc":"~15.1.0","prettier":"github:aMarCruz/prettier#2.0.5","rimraf":"~3.0.2","rollup":"~2.28.1","sourcemap-validator":"~2.1.0","tslib":"^2.0.1","typescript":"~4.0.3"},"gitHead":"8bff91d919147b8f26bb0d98d4581cb6eb0faa56","_id":"js-cleanup@1.2.0","_nodeVersion":"10.20.1","_npmVersion":"6.14.4","dist":{"shasum":"8dbc65954b1d38b255f1e8cf02cd17b3f7a053f9","size":22510,"noattachment":false,"tarball":"https://registry.npmmirror.com/js-cleanup/-/js-cleanup-1.2.0.tgz","integrity":"sha512-JeDD0yiiSt80fXzAVa/crrS0JDPQljyBG/RpOtaSbyDq03VHa9szJWMaWOYU/bcTn412uMN2MxApXq8v79cUiQ=="},"maintainers":[{"name":"amarcruz","email":"amarcruz@yahoo.com"}],"_npmUser":{"name":"amarcruz","email":"amarcruz@yahoo.com"},"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/js-cleanup_1.2.0_1600821103354_0.9753764024094664"},"_hasShrinkwrap":false,"publish_time":1600821103490,"_cnpm_publish_time":1600821103490,"_cnpmcore_publish_time":"2021-12-16T22:29:29.060Z"},"1.0.1":{"name":"js-cleanup","version":"1.0.1","description":"Smart comment and whitespace cleaner for JavaScript-like files.","main":"dist/index.js","module":"dist/index.mjs","source":"src/index.ts","engines":{"node":">=6.14"},"scripts":{"lint":"tslint *.ts && tslint -p . && eslint --ext js test","test":"nyc mocha","pretest":"yarn build","build":"rollup -c","clean":"rimraf ./.nyc_output/** ./coverage/** ./dist/**","coverage":"nyc report -r=lcov","prepublish":"npm run clean && npm run lint && npm run test"},"keywords":["javascript","typescript","es6","clean","cleanup","source","comments","remover","removal"],"author":{"name":"aMarCruz","email":"amarcruzbox-git@yahoo.com"},"license":"MIT","homepage":"https://github.com/aMarCruz/js-cleanup","bugs":{"url":"https://github.com/aMarCruz/js-cleanup/issues"},"repository":{"url":"git+https://github.com/aMarCruz/js-cleanup.git","type":"git"},"dependencies":{"magic-string":"^0.25.1","perf-regexes":"^1.0.1","skip-regex":"^1.0.2"},"devDependencies":{"@types/expect":"~1.20.03","@types/mocha":"^5.2.5","@types/node":"^10.12.18","eslint":"^5.12.0","expect":"~1.20.2","mocha":"^5.2.0","nyc":"^13.1.0","rimraf":"^2.6.2","rollup":"^0.68.2","rollup-plugin-commonjs":"^9.2.0","rollup-plugin-node-resolve":"^4.0.0","rollup-plugin-typescript":"^1.0.0","sourcemap-validator":"^1.1.0","tslib":"^1.9.3","tslint":"^5.12.1","typescript":"^3.2.4"},"gitHead":"0d97f2f7a6dc4907ece2a29c88456e2a4196651c","_id":"js-cleanup@1.0.1","_npmVersion":"5.6.0","_nodeVersion":"8.11.2","_npmUser":{"name":"amarcruz","email":"amarcruz@yahoo.com"},"dist":{"shasum":"1d38080c7ee92e1d2d2b94054d0a33c48951e0df","size":23825,"noattachment":false,"tarball":"https://registry.npmmirror.com/js-cleanup/-/js-cleanup-1.0.1.tgz","integrity":"sha512-wyHeWKqbcQV78/tiMJ6pgJrkG7p2u3b2xX9IJFvvurpJL9/++89dHfkUebhWvSMS84LG0uQ7BnG5GGyAzY21Ag=="},"maintainers":[{"name":"amarcruz","email":"amarcruz@yahoo.com"}],"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/js-cleanup_1.0.1_1547836297066_0.6845871881612615"},"_hasShrinkwrap":false,"publish_time":1547836297148,"_cnpm_publish_time":1547836297148,"_cnpmcore_publish_time":"2021-12-16T22:29:29.302Z"},"1.0.0":{"name":"js-cleanup","version":"1.0.0","description":"Smart comment and whitespace cleaner for JavaScript-like files.","main":"dist/index.js","module":"dist/index.mjs","source":"src/index.ts","engines":{"node":">=6.14"},"scripts":{"lint":"tslint *.ts && tslint -p . && eslint --ext js test","test":"nyc mocha","pretest":"yarn build","build":"rollup -c","clean":"rimraf ./.nyc_output/** ./coverage/** ./dist/**","coverage":"nyc report -r=lcov","prepublish":"npm run clean && npm run lint && npm run test"},"keywords":["javascript","typescript","es6","clean","cleanup","source","comments","remover","removal"],"author":{"name":"aMarCruz","email":"amarcruzbox-git@yahoo.com"},"license":"MIT","homepage":"https://github.com/aMarCruz/js-cleanup","bugs":{"url":"https://github.com/aMarCruz/js-cleanup/issues"},"repository":{"url":"git+https://github.com/aMarCruz/js-cleanup.git","type":"git"},"dependencies":{"magic-string":"^0.25.1","perf-regexes":"^1.0.1","skip-regex":"^1.0.2"},"devDependencies":{"@types/expect":"~1.20.03","@types/mocha":"^5.2.5","@types/node":"^10.12.18","eslint":"^5.11.0","expect":"~1.20.2","mocha":"^5.2.0","nyc":"^13.1.0","rimraf":"^2.6.2","rollup":"^0.68.2","rollup-plugin-commonjs":"^9.2.0","rollup-plugin-node-resolve":"^4.0.0","rollup-plugin-typescript":"^1.0.0","sourcemap-validator":"^1.1.0","tslib":"^1.9.3","tslint":"^5.12.0","typescript":"^3.2.2"},"gitHead":"8073d2fd12e957aa6d85cadb3d7a5555afa09028","_id":"js-cleanup@1.0.0","_npmVersion":"5.6.0","_nodeVersion":"8.11.2","_npmUser":{"name":"amarcruz","email":"amarcruz@yahoo.com"},"dist":{"shasum":"a3aad18a23a1752e9fa005f9128e65d601d2d634","size":23624,"noattachment":false,"tarball":"https://registry.npmmirror.com/js-cleanup/-/js-cleanup-1.0.0.tgz","integrity":"sha512-gT33849UQki2Ek5NJM9eCH1ZEMjzMfyE881kmfv51hxO4K+TgH+qBIt9RZjczrV02wFqNDSVCk8pE9p78I3cIw=="},"maintainers":[{"name":"amarcruz","email":"amarcruz@yahoo.com"}],"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/js-cleanup_1.0.0_1545881102503_0.27045850588917286"},"_hasShrinkwrap":false,"publish_time":1545881102644,"_cnpm_publish_time":1545881102644,"_cnpmcore_publish_time":"2021-12-16T22:29:29.731Z"},"0.9.0":{"name":"js-cleanup","version":"0.9.0","description":"Smart comment and whitespace cleaner for JavaScript-like files.","main":"dist/index.js","module":"dist/index.mjs","source":"src/index.ts","engines":{"node":">=6.14"},"scripts":{"lint":"tslint *.ts && tslint -p . && eslint --ext js test","test":"nyc mocha","pretest":"yarn build","build":"rollup -c","clean":"rimraf ./.nyc_output/** ./coverage/** ./dist/**","coverage":"nyc report -r=lcov","prepublish":"npm run clean && npm run lint && npm run test"},"keywords":["javascript","typescript","es6","clean","cleanup","source","comments","remover","removal"],"author":{"name":"aMarCruz","email":"amarcruzbox-git@yahoo.com"},"license":"MIT","homepage":"https://github.com/aMarCruz/rmcomms","bugs":{"url":"https://github.com/aMarCruz/rmcomms/issues"},"repository":{"url":"git+https://github.com/aMarCruz/rmcomms.git","type":"git"},"dependencies":{"magic-string":"^0.25.1","perf-regexes":"^1.0.1","skip-regex":"^1.0.2"},"devDependencies":{"@types/expect":"~1.20.03","@types/mocha":"^5.2.5","@types/node":"^10.12.18","eslint":"^5.11.0","expect":"~1.20.2","mocha":"^5.2.0","nyc":"^13.1.0","rimraf":"^2.6.2","rollup":"^0.68.2","rollup-plugin-commonjs":"^9.2.0","rollup-plugin-node-resolve":"^4.0.0","rollup-plugin-typescript":"^1.0.0","sourcemap-validator":"^1.1.0","tslib":"^1.9.3","tslint":"^5.12.0","typescript":"^3.2.2"},"gitHead":"a6a19f024cdb03ab8df5683b9b015153f1149737","_id":"js-cleanup@0.9.0","_npmVersion":"5.6.0","_nodeVersion":"8.11.2","_npmUser":{"name":"amarcruz","email":"amarcruz@yahoo.com"},"dist":{"shasum":"aadfbb6a239f8178d34096dbb9f57efc05085c7e","size":23123,"noattachment":false,"tarball":"https://registry.npmmirror.com/js-cleanup/-/js-cleanup-0.9.0.tgz","integrity":"sha512-RCLa/j3f2lTgzaWsBH1D/9mSk5cNyk2ZUcMZIY8hW01PyurGMES0fiz/jYxbPkG9XZP7qOkv+P/r8CFlF7wOwA=="},"maintainers":[{"name":"amarcruz","email":"amarcruz@yahoo.com"}],"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/js-cleanup_0.9.0_1545819909956_0.4554575450833338"},"_hasShrinkwrap":false,"publish_time":1545819910697,"_cnpm_publish_time":1545819910697,"_cnpmcore_publish_time":"2021-12-16T22:29:30.089Z"}},"_source_registry_name":"default"}