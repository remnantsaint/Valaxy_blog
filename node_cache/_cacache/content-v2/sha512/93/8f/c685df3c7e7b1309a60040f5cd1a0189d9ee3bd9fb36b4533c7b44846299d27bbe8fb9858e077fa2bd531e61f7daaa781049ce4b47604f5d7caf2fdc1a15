{"_attachments":{},"_id":"memoize","_rev":"271634-61f1b528ab210505a892f020","author":{"name":"Sindre Sorhus","email":"sindresorhus@gmail.com","url":"https://sindresorhus.com"},"description":"Memoize functions - An optimization used to speed up consecutive function calls by caching the result of calls with identical input","dist-tags":{"latest":"10.0.0"},"maintainers":[{"name":"sindresorhus","email":"sindresorhus@gmail.com"}],"name":"memoize","readme":"# memoize\n\n> [Memoize](https://en.wikipedia.org/wiki/Memoization) functions - An optimization used to speed up consecutive function calls by caching the result of calls with identical input\n\nMemory is automatically released when an item expires or the cache is cleared.\n\n<!-- Please keep this section in sync with https://github.com/sindresorhus/p-memoize/blob/main/readme.md -->\n\nBy default, **only the memoized function's first argument is considered** via strict equality comparison. If you need to cache multiple arguments or cache `object`s *by value*, have a look at alternative [caching strategies](#caching-strategy) below.\n\nIf you want to memoize Promise-returning functions (like `async` functions), you might be better served by [p-memoize](https://github.com/sindresorhus/p-memoize).\n\n## Install\n\n```sh\nnpm install memoize\n```\n\n## Usage\n\n```js\nimport memoize from 'memoize';\n\nlet index = 0;\nconst counter = () => ++index;\nconst memoized = memoize(counter);\n\nmemoized('foo');\n//=> 1\n\n// Cached as it's the same argument\nmemoized('foo');\n//=> 1\n\n// Not cached anymore as the argument changed\nmemoized('bar');\n//=> 2\n\nmemoized('bar');\n//=> 2\n\n// Only the first argument is considered by default\nmemoized('bar', 'foo');\n//=> 2\n```\n\n##### Works well with Promise-returning functions\n\nBut you might want to use [p-memoize](https://github.com/sindresorhus/p-memoize) for more Promise-specific behaviors.\n\n```js\nimport memoize from 'memoize';\n\nlet index = 0;\nconst counter = async () => ++index;\nconst memoized = memoize(counter);\n\nconsole.log(await memoized());\n//=> 1\n\n// The return value didn't increase as it's cached\nconsole.log(await memoized());\n//=> 1\n```\n\n```js\nimport memoize from 'memoize';\nimport got from 'got';\nimport delay from 'delay';\n\nconst memoizedGot = memoize(got, {maxAge: 1000});\n\nawait memoizedGot('https://sindresorhus.com');\n\n// This call is cached\nawait memoizedGot('https://sindresorhus.com');\n\nawait delay(2000);\n\n// This call is not cached as the cache has expired\nawait memoizedGot('https://sindresorhus.com');\n```\n\n### Caching strategy\n\nBy default, only the first argument is compared via exact equality (`===`) to determine whether a call is identical.\n\n```js\nimport memoize from 'memoize';\n\nconst power = memoize((a, b) => Math.power(a, b));\n\npower(2, 2); // => 4, stored in cache with the key 2 (number)\npower(2, 3); // => 4, retrieved from cache at key 2 (number), it's wrong\n```\n\nYou will have to use the `cache` and `cacheKey` options appropriate to your function. In this specific case, the following could work:\n\n```js\nimport memoize from 'memoize';\n\nconst power = memoize((a, b) => Math.power(a, b), {\n  cacheKey: arguments_ => arguments_.join(',')\n});\n\npower(2, 2); // => 4, stored in cache with the key '2,2' (both arguments as one string)\npower(2, 3); // => 8, stored in cache with the key '2,3'\n```\n\nMore advanced examples follow.\n\n#### Example: Options-like argument\n\nIf your function accepts an object, it won't be memoized out of the box:\n\n```js\nimport memoize from 'memoize';\n\nconst heavyMemoizedOperation = memoize(heavyOperation);\n\nheavyMemoizedOperation({full: true}); // Stored in cache with the object as key\nheavyMemoizedOperation({full: true}); // Stored in cache with the object as key, again\n// The objects look the same but for JS they're two different objects\n```\n\nYou might want to serialize or hash them, for example using `JSON.stringify` or something like [serialize-javascript](https://github.com/yahoo/serialize-javascript), which can also serialize `RegExp`, `Date` and so on.\n\n```js\nimport memoize from 'memoize';\n\nconst heavyMemoizedOperation = memoize(heavyOperation, {cacheKey: JSON.stringify});\n\nheavyMemoizedOperation({full: true}); // Stored in cache with the key '[{\"full\":true}]' (string)\nheavyMemoizedOperation({full: true}); // Retrieved from cache\n```\n\nThe same solution also works if it accepts multiple serializable objects:\n\n```js\nimport memoize from 'memoize';\n\nconst heavyMemoizedOperation = memoize(heavyOperation, {cacheKey: JSON.stringify});\n\nheavyMemoizedOperation('hello', {full: true}); // Stored in cache with the key '[\"hello\",{\"full\":true}]' (string)\nheavyMemoizedOperation('hello', {full: true}); // Retrieved from cache\n```\n\n#### Example: Multiple non-serializable arguments\n\nIf your function accepts multiple arguments that aren't supported by `JSON.stringify` (e.g. DOM elements and functions), you can instead extend the initial exact equality (`===`) to work on multiple arguments using [`many-keys-map`](https://github.com/fregante/many-keys-map):\n\n```js\nimport memoize from 'memoize';\nimport ManyKeysMap from 'many-keys-map';\n\nconst addListener = (emitter, eventName, listener) => emitter.on(eventName, listener);\n\nconst addOneListener = memoize(addListener, {\n\tcacheKey: arguments_ => arguments_, // Use *all* the arguments as key\n\tcache: new ManyKeysMap() // Correctly handles all the arguments for exact equality\n});\n\naddOneListener(header, 'click', console.log); // `addListener` is run, and it's cached with the `arguments` array as key\naddOneListener(header, 'click', console.log); // `addListener` is not run again\naddOneListener(mainContent, 'load', console.log); // `addListener` is run, and it's cached with the `arguments` array as key\n```\n\nBetter yet, if your function’s arguments are compatible with `WeakMap`, you should use [`deep-weak-map`](https://github.com/futpib/deep-weak-map) instead of `many-keys-map`. This will help avoid memory leaks.\n\n## API\n\n### memoize(fn, options?)\n\n#### fn\n\nType: `Function`\n\nThe function to be memoized.\n\n#### options\n\nType: `object`\n\n##### maxAge\n\nType: `number`\\\nDefault: `Infinity`\n\nMilliseconds until the cache expires.\n\n##### cacheKey\n\nType: `Function`\\\nDefault: `arguments_ => arguments_[0]`\\\nExample: `arguments_ => JSON.stringify(arguments_)`\n\nDetermines the cache key for storing the result based on the function arguments. By default, **only the first argument is considered**.\n\nA `cacheKey` function can return any type supported by `Map` (or whatever structure you use in the `cache` option).\n\nRefer to the [caching strategies](#caching-strategy) section for more information.\n\n##### cache\n\nType: `object`\\\nDefault: `new Map()`\n\nUse a different cache storage. Must implement the following methods: `.has(key)`, `.get(key)`, `.set(key, value)`, `.delete(key)`, and optionally `.clear()`. You could for example use a `WeakMap` instead or [`quick-lru`](https://github.com/sindresorhus/quick-lru) for a LRU cache.\n\nRefer to the [caching strategies](#caching-strategy) section for more information.\n\n### memDecorator(options)\n\nReturns a [decorator](https://github.com/tc39/proposal-decorators) to memoize class methods or static class methods.\n\nNotes:\n\n- Only class methods and getters/setters can be memoized, not regular functions (they aren't part of the proposal);\n- Only [TypeScript’s decorators](https://www.typescriptlang.org/docs/handbook/decorators.html#parameter-decorators) are supported, not [Babel’s](https://babeljs.io/docs/en/babel-plugin-proposal-decorators), which use a different version of the proposal;\n- Being an experimental feature, they need to be enabled with `--experimentalDecorators`; follow TypeScript’s docs.\n\n#### options\n\nType: `object`\n\nSame as options for `memoize()`.\n\n```ts\nimport {memoizeDecorator} from 'memoize';\n\nclass Example {\n\tindex = 0\n\n\t@memoizeDecorator()\n\tcounter() {\n\t\treturn ++this.index;\n\t}\n}\n\nclass ExampleWithOptions {\n\tindex = 0\n\n\t@memoizeDecorator({maxAge: 1000})\n\tcounter() {\n\t\treturn ++this.index;\n\t}\n}\n```\n\n### memoizeClear(fn)\n\nClear all cached data of a memoized function.\n\n#### fn\n\nType: `Function`\n\nThe memoized function.\n\n## Tips\n\n### Cache statistics\n\nIf you want to know how many times your cache had a hit or a miss, you can make use of [stats-map](https://github.com/SamVerschueren/stats-map) as a replacement for the default cache.\n\n#### Example\n\n```js\nimport memoize from 'memoize';\nimport StatsMap from 'stats-map';\nimport got from 'got';\n\nconst cache = new StatsMap();\nconst memoizedGot = memoize(got, {cache});\n\nawait memoizedGot('https://sindresorhus.com');\nawait memoizedGot('https://sindresorhus.com');\nawait memoizedGot('https://sindresorhus.com');\n\nconsole.log(cache.stats);\n//=> {hits: 2, misses: 1}\n```\n\n## Related\n\n- [p-memoize](https://github.com/sindresorhus/p-memoize) - Memoize promise-returning & async functions\n","time":{"created":"2022-01-26T20:55:04.844Z","modified":"2024-05-26T14:32:04.492Z","0.1.1":"2011-08-23T09:16:11.620Z","0.1.0":"2011-08-23T08:03:57.298Z","0.0.3":"2011-05-05T15:41:19.446Z","0.0.2":"2011-05-05T15:03:55.184Z","0.0.1":"2011-05-05T14:50:18.269Z","10.0.0":"2023-11-14T15:46:54.475Z"},"versions":{"0.1.1":{"name":"memoize","description":"memoize caches your callbacks given a set of arguments w/ persistence","keywords":["memoize","cache"],"version":"0.1.1","author":{"name":"George Stagas","email":"gstagas@gmail.com"},"engines":{"node":"*"},"dependencies":{"tosource":">=0.1.1"},"main":"./memoize","repository":{"type":"git","url":"git://github.com/stagas/memoize.git"},"bugs":{"url":"https://github.com/stagas/memoize/issues"},"_id":"memoize@0.1.1","_engineSupported":true,"_npmVersion":"0.3.18","_nodeVersion":"v0.4.8","directories":{},"files":[""],"_defaultsLoaded":true,"dist":{"tarball":"https://registry.npmmirror.com/memoize/-/memoize-0.1.1.tgz","shasum":"d265a3458be5ce3bf254998b30a995ab91668a24","size":3803,"noattachment":false,"integrity":"sha512-6XjEiKKylCv6AV9ZwNGauIGqS46mf/I2Zg466Z2yR1kcDzzSjVOdsW5EwGeaa3KT57n+WY41mVPmh+2dqLs6bQ=="},"maintainers":[{"name":"stagas","email":"gstagas@gmail.com"}],"publish_time":1314090971620,"_hasShrinkwrap":false,"_cnpm_publish_time":1314090971620,"_cnpmcore_publish_time":"2021-12-17T14:30:16.595Z"},"0.1.0":{"name":"memoize","description":"memoize caches your callbacks given a set of arguments w/ persistence","keywords":["memoize","cache"],"version":"0.1.0","author":{"name":"George Stagas","email":"gstagas@gmail.com"},"engines":{"node":"*"},"dependencies":{"tosource":">=0.1.1"},"main":"./memoize","repository":{"type":"git","url":"git://github.com/stagas/memoize.git"},"bugs":{"url":"https://github.com/stagas/memoize/issues"},"_id":"memoize@0.1.0","_engineSupported":true,"_npmVersion":"0.3.18","_nodeVersion":"v0.4.8","directories":{},"files":[""],"_defaultsLoaded":true,"dist":{"tarball":"https://registry.npmmirror.com/memoize/-/memoize-0.1.0.tgz","shasum":"61c1037a0ca916ff4d33cd84db554d4988b96925","size":3746,"noattachment":false,"integrity":"sha512-xSV/R14UMpEE2xOJcGwt1bWL502r/hrduIVW/3rFGriW1PTHWvwEpHF3jIA4PjPAbWm5eHpU2oBsqyInx5rDSA=="},"maintainers":[{"name":"stagas","email":"gstagas@gmail.com"}],"publish_time":1314086637298,"_hasShrinkwrap":false,"_cnpm_publish_time":1314086637298,"_cnpmcore_publish_time":"2021-12-17T14:30:16.841Z"},"0.0.3":{"name":"memoize","description":"memoize caches your callbacks given a set of arguments","keywords":["memoize","cache"],"version":"0.0.3","author":{"name":"George Stagas","email":"gstagas@gmail.com"},"engines":{"node":"*"},"dependencies":{"tosource":">=0.1.1"},"main":"./memoize","repository":{"type":"git","url":"git://github.com/stagas/memoize.git"},"bugs":{"url":"https://github.com/stagas/memoize/issues"},"_id":"memoize@0.0.3","_engineSupported":true,"_npmVersion":"0.3.18","_nodeVersion":"v0.4.7","directories":{},"files":[""],"_defaultsLoaded":true,"dist":{"tarball":"https://registry.npmmirror.com/memoize/-/memoize-0.0.3.tgz","shasum":"9a7a12ac9b719f7d307fb0882f191664f1ae6a23","size":3427,"noattachment":false,"integrity":"sha512-luuX1mfOouXVKy7m8d8Pqi9DqD2AVqjWiPS7fY0AqwvKW8URaHdp7/FW1Grf3qqO1VLddmTtEHYJWrQtRKbSeA=="},"publish_time":1304610079446,"maintainers":[{"name":"stagas","email":"gstagas@gmail.com"}],"_hasShrinkwrap":false,"_cnpm_publish_time":1304610079446,"_cnpmcore_publish_time":"2021-12-17T14:30:17.076Z"},"0.0.2":{"name":"memoize","description":"memoize caches your callbacks given a set of arguments","keywords":["memoize","cache"],"version":"0.0.2","author":{"name":"George Stagas","email":"gstagas@gmail.com"},"engines":{"node":"*"},"main":"./memoize","repository":{"type":"git","url":"git://github.com/stagas/memoize.git"},"bugs":{"url":"https://github.com/stagas/memoize/issues"},"_id":"memoize@0.0.2","_engineSupported":true,"_npmVersion":"0.3.18","_nodeVersion":"v0.4.7","directories":{},"files":[""],"_defaultsLoaded":true,"dist":{"tarball":"https://registry.npmmirror.com/memoize/-/memoize-0.0.2.tgz","shasum":"1fec54a625c3b753ea940630cdf33f9b95e3a103","size":3333,"noattachment":false,"integrity":"sha512-Y7tUF4lohNUh5i55fJfbg20R/ATJXp8DOH8JW03eEO+JDWLNwphz+ue5BRL6Z0A2gk6GHgNp0d5ygaof8WuflA=="},"publish_time":1304607835184,"maintainers":[{"name":"stagas","email":"gstagas@gmail.com"}],"_hasShrinkwrap":false,"_cnpm_publish_time":1304607835184,"_cnpmcore_publish_time":"2021-12-17T14:30:17.339Z"},"0.0.1":{"name":"memoize","description":"memoize caches your callbacks given a set of arguments","keywords":["memoize","cache"],"version":"0.0.1","author":{"name":"George Stagas","email":"gstagas@gmail.com"},"engines":{"node":"*"},"main":"./memoize","repository":{"type":"git","url":"git://github.com/stagas/memoize.git"},"bugs":{"url":"https://github.com/stagas/memoize/issues"},"_id":"memoize@0.0.1","_engineSupported":true,"_npmVersion":"0.3.18","_nodeVersion":"v0.4.7","directories":{},"files":[""],"_defaultsLoaded":true,"dist":{"tarball":"https://registry.npmmirror.com/memoize/-/memoize-0.0.1.tgz","shasum":"a58167513a0ce451a33db3684ccc27df1760df78","size":3319,"noattachment":false,"integrity":"sha512-6XPnORUIJEVirsnqh4My8BFY7w5mCuzXqutm400KuMTco/y7gzN/FOO8pU7jgCmpeSkRGDIiPtCXwFrD6zLLgg=="},"publish_time":1304607018269,"maintainers":[{"name":"stagas","email":"gstagas@gmail.com"}],"_hasShrinkwrap":false,"_cnpm_publish_time":1304607018269,"_cnpmcore_publish_time":"2021-12-17T14:30:17.516Z"},"10.0.0":{"name":"memoize","version":"10.0.0","description":"Memoize functions - An optimization used to speed up consecutive function calls by caching the result of calls with identical input","license":"MIT","repository":{"type":"git","url":"git+https://github.com/sindresorhus/memoize.git"},"funding":"https://github.com/sindresorhus/memoize?sponsor=1","author":{"name":"Sindre Sorhus","email":"sindresorhus@gmail.com","url":"https://sindresorhus.com"},"type":"module","exports":{"types":"./dist/index.d.ts","default":"./dist/index.js"},"sideEffects":false,"engines":{"node":">=18"},"scripts":{"test":"xo && ava && npm run build && tsd --typings dist/index.d.ts","build":"del-cli dist && tsc","prepack":"npm run build"},"keywords":["memoize","function","mem","memoization","cache","caching","optimize","performance","ttl","expire","promise"],"dependencies":{"mimic-function":"^5.0.0"},"devDependencies":{"@sindresorhus/tsconfig":"^5.0.0","@types/serialize-javascript":"^5.0.4","ava":"^5.3.1","del-cli":"^5.1.0","delay":"^6.0.0","serialize-javascript":"^6.0.1","ts-node":"^10.9.1","tsd":"^0.29.0","xo":"^0.56.0"},"ava":{"timeout":"1m","extensions":{"ts":"module"},"nodeArguments":["--loader=ts-node/esm"]},"xo":{"rules":{"@typescript-eslint/no-unsafe-return":"off"}},"gitHead":"2a8997ededd818a07edab1a750cf969ba473de3c","bugs":{"url":"https://github.com/sindresorhus/memoize/issues"},"homepage":"https://github.com/sindresorhus/memoize#readme","_id":"memoize@10.0.0","_nodeVersion":"18.18.2","_npmVersion":"9.2.0","dist":{"integrity":"sha512-H6cBLgsi6vMWOcCpvVCdFFnl3kerEXbrYh9q+lY6VXvQSmM6CkmV08VOwT+WE2tzIEqRPFfAq3fm4v/UIW6mSA==","shasum":"43fa66b2022363c7c50cf5dfab732a808a3d7147","tarball":"https://registry.npmmirror.com/memoize/-/memoize-10.0.0.tgz","fileCount":5,"unpackedSize":18417,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEYCIQDHKQATvwO767w18zWGnXbZ0kokf3n+40E+FFbTNS7zYQIhAOo1IPcJ0SvyISEnYK8wrCI1+PHX9I5m4ZyrpYhg2nt/"}],"size":5632},"_npmUser":{"name":"sindresorhus","email":"sindresorhus@gmail.com"},"directories":{},"maintainers":[{"name":"sindresorhus","email":"sindresorhus@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/memoize_10.0.0_1699976814316_0.694652217839381"},"_hasShrinkwrap":false,"_cnpmcore_publish_time":"2023-11-14T15:46:54.475Z","publish_time":1699976814475,"_source_registry_name":"default"}},"bugs":{"url":"https://github.com/sindresorhus/memoize/issues"},"keywords":["memoize","function","mem","memoization","cache","caching","optimize","performance","ttl","expire","promise"],"repository":{"type":"git","url":"git+https://github.com/sindresorhus/memoize.git"},"homepage":"https://github.com/sindresorhus/memoize#readme","license":"MIT","_source_registry_name":"default"}