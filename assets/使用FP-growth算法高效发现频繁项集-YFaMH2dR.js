import{_ as d}from"./ValaxyMain.vue_vue_type_style_index_0_lang-Lj6vZGyG.js";import{u as k,c,o as u,w as i,r as s,g as l,h as t,f as m,p as o}from"./app-D6Hejker.js";import"./YunFooter-BsWuc4uy.js";import"./YunCard.vue_vue_type_script_setup_true_lang-DrznGDEn.js";import"./index-C5okkQwF.js";import"./YunPageHeader.vue_vue_type_script_setup_true_lang-Dma2ZTu7.js";import"./post-C0fFnzag.js";const C={__name:"使用FP-growth算法高效发现频繁项集",setup(f,{expose:p}){const a=JSON.parse('{"title":"使用FP-growth算法高效发现频繁项集","description":"","frontmatter":{"layout":"post","title":"使用FP-growth算法高效发现频繁项集","date":"2024-09-25 10:18:49","cover":null,"top":null,"tags":["机器学习"],"categories":["人工智能","机器学习"]},"headers":[{"level":2,"title":"前言","slug":"前言","link":"#前言","children":[]},{"level":2,"title":"FP-growth 算法","slug":"fp-growth-算法","link":"#fp-growth-算法","children":[{"level":3,"title":"FP-growth 算法简介","slug":"fp-growth-算法简介","link":"#fp-growth-算法简介","children":[]},{"level":3,"title":"FP-growth 算法步骤","slug":"fp-growth-算法步骤","link":"#fp-growth-算法步骤","children":[]},{"level":3,"title":"FP树 介绍","slug":"fp树-介绍","link":"#fp树-介绍","children":[]},{"level":3,"title":"FP-growth 原理","slug":"fp-growth-原理","link":"#fp-growth-原理","children":[]},{"level":3,"title":"FP-growth 算法优缺点","slug":"fp-growth-算法优缺点","link":"#fp-growth-算法优缺点","children":[]}]},{"level":2,"title":"Reference","slug":"reference","link":"#reference","children":[]}],"relativePath":"pages/posts/使用FP-growth算法高效发现频繁项集.md","path":"/home/runner/work/remnantsaint.github.io/remnantsaint.github.io/pages/posts/使用FP-growth算法高效发现频繁项集.md","lastUpdated":1758348498000}'),r=k(),n=a.frontmatter||{};return r.meta.frontmatter=Object.assign(r.meta.frontmatter||{},a.frontmatter||{}),o("pageData",a),o("valaxy:frontmatter",n),globalThis.$frontmatter=n,p({frontmatter:{layout:"post",title:"使用FP-growth算法高效发现频繁项集",date:"2024-09-25 10:18:49",cover:null,top:null,tags:["机器学习"],categories:["人工智能","机器学习"]}}),(e,h)=>{const g=d;return u(),c(g,{frontmatter:m(n)},{"main-content-md":i(()=>[...h[0]||(h[0]=[l("h2",{id:"前言",tabindex:"-1"},[t("前言 "),l("a",{class:"header-anchor",href:"#前言","aria-label":'Permalink to "前言"'},"​")],-1),l("p",null,[t("在"),l("a",{href:"https://remsait.com/posts/%E4%BD%BF%E7%94%A8Apriori%E7%AE%97%E6%B3%95%E8%BF%9B%E8%A1%8C%E5%85%B3%E8%81%94%E5%88%86%E6%9E%90",target:"_blank",rel:"noreferrer"},"使用Apriori算法进行关联分析"),t("中已经介绍了用"),l("code",null,"Apriori"),t("算法发现 频繁项集 与 关联规则。本文继续关注发现 频繁项集 这一任务，并使用 "),l("code",null,"FP-growth"),t("算法更有效的挖掘 频繁项集。")],-1),l("h2",{id:"fp-growth-算法",tabindex:"-1"},[t("FP-growth 算法 "),l("a",{class:"header-anchor",href:"#fp-growth-算法","aria-label":'Permalink to "FP-growth 算法"'},"​")],-1),l("h3",{id:"fp-growth-算法简介",tabindex:"-1"},[t("FP-growth 算法简介 "),l("a",{class:"header-anchor",href:"#fp-growth-算法简介","aria-label":'Permalink to "FP-growth 算法简介"'},"​")],-1),l("ul",null,[l("li",null,"一种非常好的发现频繁项集的算法"),l("li",null,[t("基于 Apriori 算法构建，但是数据结构不同，使用叫做"),l("code",null,"FP树"),t("的数据结构来存储集合，下面介绍这种数据结构")])],-1),l("h3",{id:"fp-growth-算法步骤",tabindex:"-1"},[t("FP-growth 算法步骤 "),l("a",{class:"header-anchor",href:"#fp-growth-算法步骤","aria-label":'Permalink to "FP-growth 算法步骤"'},"​")],-1),l("ul",null,[l("li",null,"基于数据构建FP树"),l("li",null,"从FP树中挖掘频繁项集")],-1),l("h3",{id:"fp树-介绍",tabindex:"-1"},[t("FP树 介绍 "),l("a",{class:"header-anchor",href:"#fp树-介绍","aria-label":'Permalink to "FP树 介绍"'},"​")],-1),l("ul",null,[l("li",null,"FP树的结点结构如下：")],-1),l("div",{style:{"max-height":"300px"},class:"language-python vp-adaptive-theme"},[l("button",{title:"Copy Code",class:"copy"}),l("span",{class:"lang"},"python"),l("pre",{class:"shiki shiki-themes github-light github-dark vp-code"},[l("code",{"v-pre":""},[l("span",{class:"line"},[l("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"class"),l("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}}," treeNode"),l("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},":")]),t(`
`),l("span",{class:"line"},[l("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"    def"),l("span",{style:{"--shiki-light":"#005CC5","--shiki-dark":"#79B8FF"}}," __init__"),l("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"(self, nameValue, numOccur, parentNode):")]),t(`
`),l("span",{class:"line"},[l("span",{style:{"--shiki-light":"#005CC5","--shiki-dark":"#79B8FF"}},"        self"),l("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},".name "),l("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"="),l("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," nameValue     "),l("span",{style:{"--shiki-light":"#6A737D","--shiki-dark":"#6A737D"}},"# 节点名称")]),t(`
`),l("span",{class:"line"},[l("span",{style:{"--shiki-light":"#005CC5","--shiki-dark":"#79B8FF"}},"        self"),l("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},".count "),l("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"="),l("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," numOccur     "),l("span",{style:{"--shiki-light":"#6A737D","--shiki-dark":"#6A737D"}},"# 节点出现次数")]),t(`
`),l("span",{class:"line"},[l("span",{style:{"--shiki-light":"#005CC5","--shiki-dark":"#79B8FF"}},"        self"),l("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},".nodeLink "),l("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"="),l("span",{style:{"--shiki-light":"#005CC5","--shiki-dark":"#79B8FF"}}," None"),l("span",{style:{"--shiki-light":"#6A737D","--shiki-dark":"#6A737D"}},"      # 不同项集的相同项通过nodeLink连接在一起")]),t(`
`),l("span",{class:"line"},[l("span",{style:{"--shiki-light":"#6A737D","--shiki-dark":"#6A737D"}},"        # needs to be updated")]),t(`
`),l("span",{class:"line"},[l("span",{style:{"--shiki-light":"#005CC5","--shiki-dark":"#79B8FF"}},"        self"),l("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},".parent "),l("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"="),l("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," parentNode  "),l("span",{style:{"--shiki-light":"#6A737D","--shiki-dark":"#6A737D"}},"# 指向父节点")]),t(`
`),l("span",{class:"line"},[l("span",{style:{"--shiki-light":"#005CC5","--shiki-dark":"#79B8FF"}},"        self"),l("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},".children "),l("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"="),l("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," {}        "),l("span",{style:{"--shiki-light":"#6A737D","--shiki-dark":"#6A737D"}},"# 存储叶子节点")])])]),l("button",{class:"collapse"})],-1),l("h3",{id:"fp-growth-原理",tabindex:"-1"},[t("FP-growth 原理 "),l("a",{class:"header-anchor",href:"#fp-growth-原理","aria-label":'Permalink to "FP-growth 原理"'},"​")],-1),l("p",null,"  基于数据构建FP树",-1),l("ul",null,[l("li",null,[l("p",null,"步骤1："),l("ol",null,[l("li",null,"便利所有的数据集合，计算所有项的支持度"),l("li",null,"丢弃非频繁的项（图中丢掉支持度小于3的项）"),l("li",null,[t("基于 支持度 降序排列所有的项 "),l("img",{src:"https://cloudflare.remsait.com/img/FP1.png",alt:""})]),l("li",null,"所有数据集合按照得到的顺序重新整理"),l("li",null,[t("重新整理完成后，丢弃每个集合末尾非频繁的项 "),l("img",{src:"https://cloudflare.remsait.com/img/FP2.png",alt:""})])])]),l("li",null,[l("p",null,[t("步骤2："),l("br"),t(" 6. 读取每个集合插入 FP树 中，同时用一个头部链表数据结构维护不同集合的相同项 "),l("img",{src:"https://cloudflare.remsait.com/img/FP3.png",alt:""}),t("   解释：")]),l("ul",null,[l("li",null,"每一个事务都会根据频繁项排序后的结果插入到 FP 树中。"),l("li",null,[t("如果某个事务与已有的路径共享前缀，则共享部分合并；如果没有共享部分，则创建新的节点。例如，图中的第一个事务 "),l("code",null,"{z, r, y, s, t}"),t(" 创建了一条路径："),l("code",null,"z → r → y → s → t"),t("。")]),l("li",null,[t("插入下一个事务时，如果存在共享前缀部分，则复用前缀节点，并更新节点的计数。例如，插入 "),l("code",null,"{z, x, y, s, t}"),t(" 时，z 已经存在，所以 z 的计数增加，而 x 是新出现的，所以在 z 后添加了新的节点 x。   最终得到下面这样一棵树： "),l("img",{src:"https://cloudflare.remsait.com/img/FP4.png",alt:""}),t("   从 FP树 中挖掘出频繁项集")])])]),l("li",null,[l("p",null,"步骤3："),l("ol",null,[l("li",null,"对头部链表进行降序排序"),l("li",null,[t("对头部链表节点进行从小到大遍历（从最底层倒推），得到条件模式基，同时获得一个频繁项集   如上图，从头部链表 t 节点开始遍历，t 节点加入到频繁项集，找到以 t 节点为结尾的路径如下："),l("br"),l("img",{src:"https://cloudflare.remsait.com/img/FP5.png",alt:""}),t("   去掉FP树中的t节点，得到条件模式基<左边路径, 右边是值>[z,x,y,s,t]:2，[z,x,y,r,t]:1 。条件模式基的值取决于末尾节点 t ，因为 t 的出现次数最小，一个频繁项集的支持度由支持度最小的项决定。所以 t 节点的条件模式基的值可以理解为对于以 t 节点为末尾的前缀路径出现次数。（条件模式基是指包含 "),l("code",null,"t"),t(" 的所有前缀路径，但不包括 "),l("code",null,"t"),t(" 本身）")]),l("li",null,[t("条件模式基继续构造条件 FP树， 得到频繁项集，和之前的频繁项组合起来，这是一个递归遍历头部链表生成FP树的过程，递归截止条件是生成的FP树的头部链表为空。 根据步骤 2 得到的条件模式基 [z,x,y,s,t]:2，[z,x,y,r,t]:1 作为数据集继续构造出一棵FP树，计算支持度，去除非频繁项，集合按照支持度降序排序，重复上面构造FP树的步骤。最后得到下面 t-条件FP树 : "),l("img",{src:"https://cloudflare.remsait.com/img/FP6.png",alt:""}),t("   然后根据 t-条件FP树 的头部链表进行遍历，从 y 开始。得到频繁项集 ty 。然后又得到 y 的条件模式基，构造出 ty的条件FP树，即 ty-条件FP树。继续遍历ty-条件FP树的头部链表，得到频繁项集 tyx，然后又得到频繁项集 tyxz. 然后得到构造tyxz-条件FP树的头部链表是空的，终止遍历。我们得到的频繁项集有 t->ty->tyx->tyxz，这只是一小部分。")])])]),l("li",null,[l("p",null,"条件模式基：头部链表中的某一点的前缀路径组合就是条件模式基，条件模式基的值取决于末尾节点的值")]),l("li",null,[l("p",null,"条件FP树：以条件模式基为数据集构造的FP树叫做条件FP树")])],-1),l("h3",{id:"fp-growth-算法优缺点",tabindex:"-1"},[t("FP-growth 算法优缺点 "),l("a",{class:"header-anchor",href:"#fp-growth-算法优缺点","aria-label":'Permalink to "FP-growth 算法优缺点"'},"​")],-1),l("div",{style:{"max-height":"300px"},class:"language- vp-adaptive-theme"},[l("button",{title:"Copy Code",class:"copy"}),l("span",{class:"lang"}),l("pre",{class:"shiki shiki-themes github-light github-dark vp-code"},[l("code",{"v-pre":""},[l("span",{class:"line"},[l("span",null,"* 优点:  1. 因为 FP-growth 算法只需要对数据集遍历两次，所以速度更快。")]),t(`
`),l("span",{class:"line"},[l("span",null,"        2. FP树将集合按照支持度降序排序，不同路径如果有相同前缀路径共用存储空间，使得数据得到了压缩。")]),t(`
`),l("span",{class:"line"},[l("span",null,"        3. 不需要生成候选集。")]),t(`
`),l("span",{class:"line"},[l("span",null,"        4. 比Apriori更快。")]),t(`
`),l("span",{class:"line"},[l("span",null,"* 缺点:  1. FP-Tree第二次遍历会存储很多中间过程的值，会占用很多内存。")]),t(`
`),l("span",{class:"line"},[l("span",null,"        2. 构建FP-Tree是比较昂贵的。")]),t(`
`),l("span",{class:"line"},[l("span",null,"* 适用数据类型: 标称型数据(离散型数据)。")])])]),l("button",{class:"collapse"})],-1),l("h2",{id:"reference",tabindex:"-1"},[t("Reference "),l("a",{class:"header-anchor",href:"#reference","aria-label":'Permalink to "Reference"'},"​")],-1),l("p",null,[l("a",{href:"https://github.com/apachecn/ailearning/blob/master/docs/ml/12.md",target:"_blank",rel:"noreferrer"},"https://github.com/apachecn/ailearning/blob/master/docs/ml/12.md")],-1)])]),"main-header":i(()=>[s(e.$slots,"main-header")]),"main-header-after":i(()=>[s(e.$slots,"main-header-after")]),"main-nav":i(()=>[s(e.$slots,"main-nav")]),"main-content":i(()=>[s(e.$slots,"main-content")]),"main-content-after":i(()=>[s(e.$slots,"main-content-after")]),"main-nav-before":i(()=>[s(e.$slots,"main-nav-before")]),"main-nav-after":i(()=>[s(e.$slots,"main-nav-after")]),comment:i(()=>[s(e.$slots,"comment")]),footer:i(()=>[s(e.$slots,"footer")]),aside:i(()=>[s(e.$slots,"aside")]),"aside-custom":i(()=>[s(e.$slots,"aside-custom")]),default:i(()=>[s(e.$slots,"default")]),_:3},8,["frontmatter"])}}};export{C as default};
